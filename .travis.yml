sudo: required
dist: trusty
language: cpp

jdk:
  - oraclejdk8

env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "Ncn6/msd5oa9PiMYS5y3bpqbcqnB9Wwr7UIEtDS6fd1X01sk7aWF267kMNq8ijosJtk1P4vjKmZomfhTyQgILV6UkNkSDae5NOc39XM9yoysxc6LHTnF8/E5wXgbV1oDJR9kenrBzX49ZRJxwYa9WgXsGz4AiDyUB9eMy48eomnyNXG/SkZBbPmxaI0zSCACWH0VMHwvxHOHnaXHMOuQDVN+oxP4gEdQ/Cz2P0QJl1TvE5hpYB9fW/yItcdgL7sVkiFXbkZh5l3s52fGEN339e9CEEEEqnEUmFAzq0nsZNKZqh+ivh4Ga2qJa+btLGkEYyNQyKpOjy21Wx8UKY6uT5ZVxdSK943dbn0+v2nr0K++Hu2mRoq3btMfza5PZGQrK/XdOgathqxMoqSlKKXNo5qQoHfyjRLUscaZPsF/kWfnUoRGA90Eg6RLq59gsKkQjSJ0cWJ6Czt2txJZvmAZn51thBMJ3QW88+taDXkSVXsXkrdPjGPrwUt+okhvXJK5+PeSa+Fb4CJUiijOAg9Sew+WDJdsP9d0gVtEncXiVdAgdUFZ9wbyKCrjPisKxZWzzMDr+7tT3MQmg8FagPMkm5PW9Q+Ewof2VLjxffX+PhHcWvUrVqe8KBEVuJNs4SYG0ETsvp0+y8tyh5o+zAmc8fKsuYmEDNJ727rjrTfA56A="

addons:
  coverity_scan:
    project:
      name: "comphack/comp_hack"
      description: "Build submitted via Travis CI"
    notification_email: compomega@tutanota.com
    build_command_prepend: "mkdir build && cd build && cmake -G \"${GENERATOR\" .."
    build_command: "cmake --build ."
    branch_pattern: coverity_scan

matrix:
  include:
    - compiler: clang
      env:
        - COMPILER_CC=clang
        - COMPILER_CXX=clang++
        - CMAKE_GENERATOR='Unix Makefiles'
    - compiler: clang
      env:
        - COMPILER_CC=clang
        - COMPILER_CXX=clang++
        - CMAKE_GENERATOR=Ninja
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
      env:
        - COMPILER_CC=gcc-4.9
        - COMPILER_CXX=g++-4.9
        - CMAKE_GENERATOR='Unix Makefiles'
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
        - COMPILER_CC=gcc-5
        - COMPILER_CXX=g++-5
        - CMAKE_GENERATOR='Unix Makefiles'

before_install:
  - sudo apt-get update -q
  - sudo apt-get install libssl-dev doxygen libsqlite3-dev sqlite3 libuv-dev libqt5webkit5-dev unzip -y
  - export cwd="`pwd`"
  - sudo mkdir -p /opt/ninja/bin
  - cd /opt/ninja/bin
  - sudo wget https://github.com/ninja-build/ninja/releases/download/v1.7.1/ninja-linux.zip
  - sudo unzip ninja-linux.zip
  - sudo chmod 755 ninja
  - sudo rm ninja-linux.zip
  - export PATH="/opt/ninja/bin:${PATH}"
  - cd /opt
  - sudo wget -q https://cmake.org/files/v3.6/cmake-3.6.1-Linux-x86_64.tar.gz
  - sudo tar xf cmake-3.6.1-Linux-x86_64.tar.gz
  - sudo rm cmake-3.6.1-Linux-x86_64.tar.gz
  - export PATH="/opt/cmake-3.6.1-Linux-x86_64/bin:${PATH}"
  - export LD_LIBRARY_PATH="/opt/cmake-3.6.1-Linux-x86_64/lib"
  - cd $cwd
  - if [ "$CXX" == "clang++" ]; then export cwd="`pwd`"; fi
  - if [ "$CXX" == "clang++" ]; then cd /opt; fi
  - if [ "$CXX" == "clang++" ]; then sudo wget -q http://llvm.org/releases/3.8.0/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi
  - if [ "$CXX" == "clang++" ]; then sudo tar xf clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi
  - if [ "$CXX" == "clang++" ]; then sudo rm clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi
  - if [ "$CXX" == "clang++" ]; then export PATH="/opt/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04/bin:${PATH}"; fi
  - if [ "$CXX" == "clang++" ]; then export LD_LIBRARY_PATH="/opt/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04/lib:${LD_LIBRARY_PATH}"; fi
  - if [ "$CXX" == "clang++" ]; then cd "$cwd"; fi
  - export CC="${COMPILER_CC}"
  - export CXX="${COMPILER_CXX}"
  - export GENERATOR="${CMAKE_GENERATOR}"

script:
  - jdk_switcher use oraclejdk8
  - java -version
  - wget http://apache.claz.org/cassandra/3.7/apache-cassandra-3.7-bin.tar.gz
  - tar xzf apache-cassandra-3.7-bin.tar.gz
  - sudo mv apache-cassandra-3.7 /opt/cassandra
  - rm apache-cassandra-3.7-bin.tar.gz
  - sudo mkdir /var/lib/cassandra
  - sudo mkdir /var/log/cassandra
  - sudo chown -R $USER:$GROUP /var/lib/cassandra
  - sudo chown -R $USER:$GROUP /var/log/cassandra
  - export CASSANDRA_HOME="/opt/cassandra"
  - export PATH="$PATH:$CASSANDRA_HOME/bin"
  - sudo sh "$CASSANDRA_HOME/bin/cassandra" -R
  - sleep 10
  - nodetool status
  - cqlsh -e "SHOW HOST; SHOW VERSION;"
  - sudo mkdir /etc/comp_hack
  - sudo cp contrib/testing/lobby.xml /etc/comp_hack/
  - mkdir -p build && cd build && cmake -G "${GENERATOR}" .. && cmake --build .
  - bin/comp_lobby --testing &
  - sleep 10
  - cmake --build . --target Experimental
